<?php

namespace Neoan3\Component\Migrate;

use Neoan3\Core\Renderer;
use Neoan3\Core\RouteException;
use Neoan3\Core\Serve;
use Neoan3\Provider\FileSystem\File;
use Neoan3\Provider\FileSystem\Native;

/**
 * Class MigrateController
 * @package Neoan3\Component\Migrate
 *
 * Generated by neoan3-cli for neoan3 v3.*
 */
class MigrateController extends Serve
{
    private bool $isSafeSpace;
    private bool $isNewestCli = false;
    private Native $fileSystem;

    public function __construct(Renderer $renderer = null, Native $fileSystem= null)
    {
        parent::__construct($renderer);
        $this->fileSystem = $this->assignProvider('file', $fileSystem, function (){
            return new File();
        });
        $this->isSafeSpace = $this->fileSystem->exists(dirname(path) . '/.safe-space');
        if($this->isSafeSpace){
            $cliVersion = $this->runShellCommand('neoan3 -v');
            preg_match('/v([0-9]+)\.([0-9]+)\.([0-9]+)/',$cliVersion, $version);
            // current minimum requirement
            $this->isNewestCli = $version[1] >= 1 && $version[2]>=5 && $version[3]>=2;
        }
    }

    /**
     * Route: Migrate
     */
    function init(): void
    {
        $this
            ->callback(function($serve){
                $serve->renderer->includeJs(__DIR__ . '/migrate.ctrl.js',[
                    'base'=>base,
                    'models' => $serve->migrateFiles(),
                    'safeSpace' => $serve->isSafeSpace,
                    'newestCli' => $this->isNewestCli
                ]);
                $serve->renderer->includeStylesheet('https://cdn.jsdelivr.net/npm/gaudiamus-css@latest/css/gaudiamus.min.css');
                $serve->renderer->includeJs('https://cdn.jsdelivr.net/gh/alpinejs/alpine@v2.7.0/dist/alpine.min.js');
                $serve->renderer->includeStylesheet(base . 'frame/Demo/demo.css');
            })
            ->hook('main', 'migrate', ['cli-requirement' => $this->isNewestCli])
            ->hook('header','nav')
            ->output();
    }

    function postMigrate(array $body): array
    {
        $folder = path . '/model/' . ucfirst($body['name']);
        if($this->fileSystem->exists($folder) ){
            $this->generateInterfaces($body, $folder);
            $this->generateModelWrapper($body, $folder);
            $this->fileSystem->putContents($folder. '/migrate.json', json_encode($body['migrate']));
            return $this->updateDatabase($body['dbCredentials']);
        }
        return ['success'=> false];
    }

    /**
     * @throws RouteException
     */
    function putMigrate($body):array
    {
        if(!$this->isSafeSpace){
            throw new RouteException('Not within safe space', 401);
        }
        $this->runShellCommand("neoan3 new model ". $body['name']);
        return json_decode($this->migrateFiles());
    }
    private function updateDatabase($credentialName): array
    {
        if($this->isSafeSpace){
            $try = $this->runShellCommand('neoan3 migrate models up -n:' . $credentialName);
            return ['success'=> $try ? 'safe-space' : false];
        }
        return ['success'=> true];
    }

    private function migrateFiles()
    {
        $models = [];
        foreach ($this->fileSystem->glob(path . '/model/*/migrate.json') as $migrate) {
            preg_match('/model\/([^\/]+)/', $migrate, $name);
            $models[] = [
                'name' => $name[1],
                'migrate' => json_decode($this->fileSystem->getContents($migrate), true)
            ];
        }
        return json_encode($models);
    }
    private function generateModelWrapper($migration, $folder)
    {

        $all = "<?php\nnamespace Neoan3\\Model\\{$migration['name']};\n\n";
        $all .= "use Neoan3\Provider\Model\ModelWrapper;\n";
        $all .= "use Neoan3\Provider\Model\ModelWrapperTrait;\n\n";
        $all .= "class {$migration['name']}ModelWrapper extends {$migration['name']}Model implements ModelWrapper\n{\n";
        $all .= "\tuse ModelWrapperTrait;\n\n";
        $mainTable = array_shift($migration['migrate']);
        foreach ($mainTable as $name => $definition){
            $definition['type'] = preg_replace('/\([0-9]+\)/', '', $definition['type']);
            $type = 'string';
            if(in_array($definition['type'],['boolean','tinyint','int'])){
                $type = 'int';
            }
            if($definition['key'] === 'primary' || $definition['nullable']){
                $type = '?' . $type;
            }
            $all .= "\tprivate $type \$" . $name . ($definition['nullable'] ? ' = null;' : ';') . "\n";
        }
        foreach ($migration['migrate'] as $tableName => $properties){
            $all .= "\tprivate array \$$tableName = [];\n";
        }
        $all .= "\n";
        foreach ($mainTable as $name => $definition){
            $namePart = str_replace('_', '', ucwords($name, '_'));
            $all .= "\tpublic function get$namePart(): mixed\n\t{\n";
            $all .= "\t\treturn \$this->$name;\n\t}\n\n";
            $all .= "\tpublic function set$namePart(\$input): static\n\t{\n";
            $all .= "\t\t\$this->$name = \$input;\n";
            $all .= "\t\treturn \$this;\n\t}\n\n";
        }
        foreach ($migration['migrate'] as $tableName => $properties){
            $namePart = str_replace('_', '', ucwords($tableName, '_'));
            $all .= "\tpublic function get$namePart(): array\n\t{\n";
            $all .= "\t\treturn \$this->$tableName;\n\t}\n\n";
            $all .= "\tpublic function add$namePart(array \$newSub): static\n\t{\n";
            $all .= "\t\t\$this->$tableName" . "[] = \$newSub;\n";
            $all .= "\t\treturn \$this;\n\t}\n\n";

            $all .= "\tpublic function remove$namePart(string \$id): static\n\t{\n";
            $all .= "\t\tforeach (\$this->$tableName as \$i => \$any){\n";
            $all .= "\t\t\tif(\$any['id'] === \$id){\n";
            $all .= "\t\t\t\t\$this->$tableName"."[\$i]['delete_date'] = null;\n\t\t\t}\n\t\t}\n";
            $all .= "\t\treturn \$this;\n\t}\n\n";

        }
        $all .= '}';
        $this->fileSystem->putContents($folder . '/' . $migration['name'] . 'ModelWrapper.php', $all);
        return $all;
    }
    private function generateInterfaces($migrate, $folder)
    {
        $all = '';
        $tables = [];
        foreach ($migrate['migrate'] as $table => $any){
            $tables[] = $table;
        }
        $i = 0;
        foreach ($migrate['migrate'] as $table => $desc) {
            $c = 'interface ' . ucfirst($table) . "{\n\t";
            foreach ($desc as $name => $item) {
                switch (preg_replace('/\([0-9]+\)/', '', $item['type'])) {
                    case 'binary':
                        $c .= ($item['key'] === 'primary' ? 'readonly ':'') . $name . "?: string,\n\t";
                        break;
                    case 'timestamp':
                    case 'datetime':
                        $c .= "readonly " . $name . "_st: number,\n\t";
                        $c .= $name . ($item['nullable'] ? '?' : '') . ": string,\n\t";
                        break;
                    case 'varchar':
                    case 'text':
                        $c .= $name . ($item['nullable'] ? '?' : '') . ": string,\n\t";
                        break;
                    default:
                        $c .= $name . ($item['nullable'] ? '?' : '') . ": number,\n\t";

                }

            }
            if($i == 0){
                $subs = array_slice($tables,1);
                foreach ($subs as $sub){
                    $c .= $sub .': Array<' . ucfirst($sub) . ">,\n\t";
                }
            }
            $c = substr($c,0,-1) . "}\n";
            $all .= $c;
            $i++;
        }
        $tables = array_map(function ($val){ return ucfirst($val);}, $tables);
        $all .= "\nexport {" . implode(', ', $tables)  . "}";
        $this->fileSystem->putContents($folder . '/' . $migrate['name'] . '.ts', $all);
        return $all;
    }
    private function runShellCommand($neoanCommand)
    {
        $path = path;
        $pipe = DIRECTORY_SEPARATOR === '\\' ? '|' : '\\';
        $command = "cd $path $pipe $neoanCommand";
        return shell_exec($command);
    }

}